apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion 28
    buildToolsVersion "28.0.3"
    def versionPropsFile = file('version.properties')
    if (versionPropsFile.canRead()) {
        Properties versionProps = new Properties()

        versionProps.load(new FileInputStream(versionPropsFile))

        /*def value = 0
        def runTasks = gradle.startParameter.taskNames
        if ('assemble' in runTasks || 'assembleRelease' in runTasks || 'aR' in runTasks) {
            value = 1
        }*/

        def versionMajor = 1
        def versionMinor = 0
        def versionBugFixes = 0

        def versionBuild = versionProps['VERSION_BUILD'].toInteger() + 1

        if (versionBuild > 99) {
            throw new GradleException("Your Build Version must be lower than 99!")
        }

        def versionStringName = "${versionMajor}.${versionMinor}.${versionBugFixes}"

        versionMinor = versionMinor.toString().padLeft( 2, '0' )
        versionBuild = versionBuild.toString().padLeft( 2, '0' )
        versionBugFixes = versionBugFixes.toString().padLeft( 2, '0' )
        versionBuild = versionBuild.toString().padLeft( 2, '0' )

        def versionNumber = "${versionMajor}${versionMinor}${versionBugFixes}${versionBuild}".toInteger()

        versionProps['VERSION_MAJOR'] = versionMajor.toString()
        versionProps['VERSION_MINOR'] = versionMinor.toString()
        versionProps['VERSION_BUG_FIXES'] = versionBugFixes.toString()
        versionProps['VERSION_BUILD'] = versionBuild.toString()
        versionProps['VERSION_NUMBER'] = versionNumber.toString()

        versionProps.store(versionPropsFile.newWriter(), null)

        defaultConfig {
            applicationId "io.centrilliontech.suprinya"
            minSdkVersion 15
            targetSdkVersion 28
            versionCode versionNumber
            versionName versionStringName
            testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
            multiDexEnabled true
        }

        applicationVariants.all { variant ->
            variant.outputs.each { output ->
                //def fileNaming = "apk/RELEASES"
                def outputFile = output.outputFileName
                if (outputFile != null && outputFile.endsWith('.apk')) {
                    //def name = "${fileNaming}-${versionMajor}.${versionMinor}.${versionPatch}-${outputFile}"
                    def name = "${outputFile}"
                    output.outputFileName = name
                }
            }
        }

    } else {
        throw new GradleException("Could not read version.properties!")
    }

    buildTypes {
        debug {
            testCoverageEnabled = true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    flavorDimensions "source"
    productFlavors {
        api {
            dimension "source"
            applicationId "io.centrilliontech.suprinya.automatedtestcidemoapi"
            proguardFile 'proguard-rules.pro'
        }

        mock {
            dimension "source"
            applicationId "io.centrilliontech.suprinya.automatedtestcidemomock"
            proguardFile 'proguard-rules.pro'
        }
    }
    testOptions.unitTests.all {
        testLogging {
            events "passed", "skipped", "failed"
            exceptionFormat "full"
        }
    }
    signingConfigs {
        release {
            storeFile file("keystore.jks")
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    //testing
    testImplementation "junit:junit:${rootProject.ext.junitVersion}"

    androidTestImplementation "androidx.test.espresso:espresso-core:${rootProject.ext.androidxEspressoVersion}"

    // Core library
    androidTestImplementation 'androidx.test:core:1.1.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.0'
    androidTestImplementation "androidx.arch.core:core-testing:${rootProject.ext.androidxCoreTestingVersion}"
    androidTestImplementation "androidx.test:runner:${rootProject.ext.androidxTestVersion}"
    androidTestImplementation "androidx.test:rules:${rootProject.ext.androidxTestVersion}"

    androidTestImplementation "android.arch.core:core-testing:1.1.1"

    androidTestImplementation 'com.android.support.test:rules:1.0.2'

    testImplementation "com.nhaarman:mockito-kotlin-kt1.1:${rootProject.ext.mockitoKotlinVersion}"
    testImplementation "org.hamcrest:hamcrest-library:${rootProject.ext.hamcrestVersion}"
    testImplementation "org.robolectric:robolectric:${rootProject.ext.robolectricVersion}"

    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support:recyclerview-v7:28.0.0'
    implementation 'com.android.support:customtabs:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    implementation 'android.arch.lifecycle:extensions:1.1.1'

    //network
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.2'
    implementation 'io.reactivex.rxjava2:rxjava:2.1.9'
    implementation 'com.squareup.retrofit2:retrofit:2.4.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.4.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.4.0'
    implementation 'com.squareup.okhttp3:okhttp:3.10.0'

    implementation 'com.github.bumptech.glide:glide:4.9.0'
    kapt 'com.github.bumptech.glide:compiler:4.9.0'

    implementation 'com.jakewharton.timber:timber:4.7.1'
}
